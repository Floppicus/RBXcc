{"version":3,"file":"ts-rcon.esm.js","sources":["../src/node-rcon.ts"],"sourcesContent":["import * as events from 'events';\nimport * as net from 'net';\nimport * as dgram from 'dgram';\nimport { Buffer } from 'buffer';\n\nconst PacketType = {\n  COMMAND: 0x02,\n  AUTH: 0x03,\n  RESPONSE_VALUE: 0x00,\n  RESPONSE_AUTH: 0x02,\n};\n\ninterface Options {\n  tcp?: boolean;\n  challenge?: boolean;\n  id?: number;\n}\n\nexport class Rcon extends events.EventEmitter {\n  private host: string;\n  private port: number;\n  private password: string;\n  private rconId: number;\n  private hasAuthed: boolean;\n  private outstandingData: Uint8Array | null;\n  private tcp: boolean;\n  private challenge: boolean;\n  private _challengeToken: string;\n  private _tcpSocket!: net.Socket;\n  private _udpSocket!: dgram.Socket;\n\n  constructor(host: string, port: number, password: string, options?: Options) {\n    super();\n    options = options || {};\n    this.host = host;\n    this.port = port;\n    this.password = password;\n    this.rconId = options.id || 0x0012d4a6; // This is arbitrary in most cases\n    this.hasAuthed = false;\n    this.outstandingData = null;\n    this.tcp = options.tcp ? options.tcp : true;\n    this.challenge = options.challenge ? options.challenge : true;\n    this._challengeToken = '';\n\n    events.EventEmitter.call(this);\n  }\n\n  public send = (data: string, cmd?: number, id?: number): void => {\n    let sendBuf: Buffer;\n    if (this.tcp) {\n      cmd = cmd || PacketType.COMMAND;\n      id = id || this.rconId;\n\n      const length = Buffer.byteLength(data);\n      sendBuf = Buffer.alloc(length + 14);\n      sendBuf.writeInt32LE(length + 10, 0);\n      sendBuf.writeInt32LE(id, 4);\n      sendBuf.writeInt32LE(cmd, 8);\n      sendBuf.write(data, 12);\n      sendBuf.writeInt16LE(0, length + 12);\n    } else {\n      if (this.challenge && !this._challengeToken) {\n        this.emit('error', new Error('Not authenticated'));\n        return;\n      }\n      let str = 'rcon ';\n      if (this._challengeToken) str += this._challengeToken + ' ';\n      if (this.password) str += this.password + ' ';\n      str += data + '\\n';\n      sendBuf = Buffer.alloc(4 + Buffer.byteLength(str));\n      sendBuf.writeInt32LE(-1, 0);\n      sendBuf.write(str, 4);\n    }\n    this._sendSocket(sendBuf);\n  };\n\n  private _sendSocket = (buf: Buffer) => {\n    if (this._tcpSocket) {\n      this._tcpSocket.write(buf.toString('binary'), 'binary');\n    } else if (this._udpSocket) {\n      this._udpSocket.send(buf, 0, buf.length, this.port, this.host);\n    }\n  };\n\n  public connect = (): void => {\n    if (this.tcp) {\n      this._tcpSocket = net.createConnection(this.port, this.host);\n      this._tcpSocket\n        .on('data', data => {\n          this._tcpSocketOnData(data);\n        })\n        .on('connect', () => {\n          this.socketOnConnect();\n        })\n        .on('error', err => {\n          this.emit('error', err);\n        })\n        .on('end', () => {\n          this.socketOnEnd();\n        });\n    } else {\n      this._udpSocket = dgram.createSocket('udp4');\n      this._udpSocket\n        .on('message', data => {\n          this._udpSocketOnData(data);\n        })\n        .on('listening', () => {\n          this.socketOnConnect();\n        })\n        .on('error', err => {\n          this.emit('error', err);\n        })\n        .on('close', () => {\n          this.socketOnEnd();\n        });\n      this._udpSocket.bind(0);\n    }\n  };\n\n  public disconnect = (): void => {\n    if (this._tcpSocket) this._tcpSocket.end();\n    if (this._udpSocket) this._udpSocket.close();\n  };\n\n  public setTimeout = (timeout: number, callback: () => void): void => {\n    if (!this._tcpSocket) return;\n    this._tcpSocket.setTimeout(timeout, () => {\n      this._tcpSocket.end();\n      if (callback) callback();\n    });\n  };\n\n  private _udpSocketOnData = (data: Buffer) => {\n    const a = data.readUInt32LE(0);\n    if (a === 0xffffffff) {\n      const str = data.toString('utf-8', 4);\n      const tokens = str.split(' ');\n      if (\n        tokens.length === 3 &&\n        tokens[0] === 'challenge' &&\n        tokens[1] === 'rcon'\n      ) {\n        this._challengeToken = tokens[2].substr(0, tokens[2].length - 1).trim();\n        this.hasAuthed = true;\n        this.emit('auth');\n      } else {\n        this.emit('response', str.substr(1, str.length - 2));\n      }\n    } else {\n      this.emit('error', new Error('Received malformed packet'));\n    }\n  };\n\n  private _tcpSocketOnData = (data: Buffer) => {\n    if (this.outstandingData != null) {\n      data = Buffer.concat(\n        [this.outstandingData, data],\n        this.outstandingData.length + data.length\n      );\n      this.outstandingData = null;\n    }\n\n    while (data.length) {\n      const len = data.readInt32LE(0);\n      if (!len) return;\n\n      const id = data.readInt32LE(4);\n      const type = data.readInt32LE(8);\n\n      if (len >= 10 && data.length >= len + 4) {\n        if (id === this.rconId) {\n          if (!this.hasAuthed && type === PacketType.RESPONSE_AUTH) {\n            this.hasAuthed = true;\n            this.emit('auth');\n          } else if (type === PacketType.RESPONSE_VALUE) {\n            // Read just the body of the packet (truncate the last null byte)\n            // See https://developer.valvesoftware.com/wiki/Source_RCON_Protocol for details\n            let str = data.toString('utf8', 12, 12 + len - 10);\n\n            if (str.charAt(str.length - 1) === '\\n') {\n              // Emit the response without the newline.\n              str = str.substring(0, str.length - 1);\n            }\n\n            this.emit('response', str);\n          }\n        } else {\n          this.emit('error', new Error('Authentication failed'));\n        }\n\n        data = data.slice(12 + len - 8);\n      } else {\n        // Keep a reference to the chunk if it doesn't represent a full packet\n        this.outstandingData = data;\n        break;\n      }\n    }\n  };\n\n  public socketOnConnect = (): void => {\n    this.emit('connect');\n\n    if (this.tcp) {\n      this.send(this.password, PacketType.AUTH);\n    } else if (this.challenge) {\n      const str = 'challenge rcon\\n';\n      const sendBuf = Buffer.alloc(str.length + 4);\n      sendBuf.writeInt32LE(-1, 0);\n      sendBuf.write(str, 4);\n      this._sendSocket(sendBuf);\n    } else {\n      const sendBuf = Buffer.alloc(5);\n      sendBuf.writeInt32LE(-1, 0);\n      sendBuf.writeUInt8(0, 4);\n      this._sendSocket(sendBuf);\n\n      this.hasAuthed = true;\n      this.emit('auth');\n    }\n  };\n\n  public socketOnEnd = (): void => {\n    this.emit('end');\n    this.hasAuthed = false;\n  };\n}\n"],"names":["PacketType","COMMAND","AUTH","RESPONSE_VALUE","RESPONSE_AUTH","Rcon","host","port","password","options","data","cmd","id","sendBuf","tcp","rconId","length","Buffer","byteLength","alloc","writeInt32LE","write","writeInt16LE","challenge","_challengeToken","emit","Error","str","_sendSocket","buf","_tcpSocket","toString","_udpSocket","send","net","on","_tcpSocketOnData","socketOnConnect","err","socketOnEnd","dgram","_udpSocketOnData","bind","end","close","timeout","callback","setTimeout","a","readUInt32LE","tokens","split","substr","trim","hasAuthed","outstandingData","concat","len","readInt32LE","type","charAt","substring","slice","writeUInt8","events","call"],"mappings":"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"}